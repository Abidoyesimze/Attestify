/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../common";
import type {
  MockSelfProtocol,
  MockSelfProtocolInterface,
} from "../../contracts/MockSelfProtocol";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "OwnableInvalidOwner",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "OwnableUnauthorizedAccount",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "isVerified",
    outputs: [
      {
        internalType: "bool",
        name: "verifiedStatus",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "proof",
        type: "bytes",
      },
    ],
    name: "setValidProof",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "validProofs",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "verifiedUsers",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "proof",
        type: "bytes",
      },
    ],
    name: "verify",
    outputs: [
      {
        internalType: "bool",
        name: "isValid",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "verifyUser",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "proof",
        type: "bytes",
      },
    ],
    name: "verifyUserWithProof",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5033600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036100845760006040517f1e4fbdf700000000000000000000000000000000000000000000000000000000815260040161007b919061019e565b60405180910390fd5b6100938161009960201b60201c565b506101b9565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006101888261015d565b9050919050565b6101988161017d565b82525050565b60006020820190506101b3600083018461018f565b92915050565b610afc806101c86000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c8063b07d814d11610066578063b07d814d14610133578063b9209e3314610163578063bd00859014610193578063e35fe366146101af578063f2fde38b146101df5761009e565b806310804465146100a35780634d813120146100bf578063715018a6146100db5780638da5cb5b146100e55780638e760afe14610103575b600080fd5b6100bd60048036038101906100b891906106de565b6101fb565b005b6100d960048036038101906100d49190610789565b610240565b005b6100e36102a2565b005b6100ed6102b6565b6040516100fa91906107c5565b60405180910390f35b61011d600480360381019061011891906106de565b6102df565b60405161012a91906107fb565b60405180910390f35b61014d60048036038101906101489190610957565b610317565b60405161015a91906107fb565b60405180910390f35b61017d60048036038101906101789190610789565b61034d565b60405161018a91906107fb565b60405180910390f35b6101ad60048036038101906101a891906109a0565b6103a3565b005b6101c960048036038101906101c49190610789565b61046c565b6040516101d691906107fb565b60405180910390f35b6101f960048036038101906101f49190610789565b61048c565b005b610203610512565b600160028383604051610217929190610a30565b908152602001604051809103902060006101000a81548160ff0219169083151502179055505050565b610248610512565b60018060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b6102aa610512565b6102b46000610599565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600283836040516102f3929190610a30565b908152602001604051809103902060009054906101000a900460ff16905092915050565b6002818051602081018201805184825260208301602085012081835280955050505050506000915054906101000a900460ff1681565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b600282826040516103b5929190610a30565b908152602001604051809103902060009054906101000a900460ff16610410576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161040790610aa6565b60405180910390fd5b60018060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550505050565b60016020528060005260406000206000915054906101000a900460ff1681565b610494610512565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036105065760006040517f1e4fbdf70000000000000000000000000000000000000000000000000000000081526004016104fd91906107c5565b60405180910390fd5b61050f81610599565b50565b61051a61065d565b73ffffffffffffffffffffffffffffffffffffffff166105386102b6565b73ffffffffffffffffffffffffffffffffffffffff16146105975761055b61065d565b6040517f118cdaa700000000000000000000000000000000000000000000000000000000815260040161058e91906107c5565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b60008083601f84011261069e5761069d610679565b5b8235905067ffffffffffffffff8111156106bb576106ba61067e565b5b6020830191508360018202830111156106d7576106d6610683565b5b9250929050565b600080602083850312156106f5576106f461066f565b5b600083013567ffffffffffffffff81111561071357610712610674565b5b61071f85828601610688565b92509250509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006107568261072b565b9050919050565b6107668161074b565b811461077157600080fd5b50565b6000813590506107838161075d565b92915050565b60006020828403121561079f5761079e61066f565b5b60006107ad84828501610774565b91505092915050565b6107bf8161074b565b82525050565b60006020820190506107da60008301846107b6565b92915050565b60008115159050919050565b6107f5816107e0565b82525050565b600060208201905061081060008301846107ec565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6108648261081b565b810181811067ffffffffffffffff821117156108835761088261082c565b5b80604052505050565b6000610896610665565b90506108a2828261085b565b919050565b600067ffffffffffffffff8211156108c2576108c161082c565b5b6108cb8261081b565b9050602081019050919050565b82818337600083830152505050565b60006108fa6108f5846108a7565b61088c565b90508281526020810184848401111561091657610915610816565b5b6109218482856108d8565b509392505050565b600082601f83011261093e5761093d610679565b5b813561094e8482602086016108e7565b91505092915050565b60006020828403121561096d5761096c61066f565b5b600082013567ffffffffffffffff81111561098b5761098a610674565b5b61099784828501610929565b91505092915050565b6000806000604084860312156109b9576109b861066f565b5b60006109c786828701610774565b935050602084013567ffffffffffffffff8111156109e8576109e7610674565b5b6109f486828701610688565b92509250509250925092565b600081905092915050565b6000610a178385610a00565b9350610a248385846108d8565b82840190509392505050565b6000610a3d828486610a0b565b91508190509392505050565b600082825260208201905092915050565b7f496e76616c69642070726f6f6600000000000000000000000000000000000000600082015250565b6000610a90600d83610a49565b9150610a9b82610a5a565b602082019050919050565b60006020820190508181036000830152610abf81610a83565b905091905056fea26469706673582212203663c5c76fd4eb67fe70b4633ad81bc000c6867aaab2155baa78aeda28ed405a64736f6c634300081c0033";

type MockSelfProtocolConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockSelfProtocolConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockSelfProtocol__factory extends ContractFactory {
  constructor(...args: MockSelfProtocolConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      MockSelfProtocol & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): MockSelfProtocol__factory {
    return super.connect(runner) as MockSelfProtocol__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockSelfProtocolInterface {
    return new Interface(_abi) as MockSelfProtocolInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): MockSelfProtocol {
    return new Contract(address, _abi, runner) as unknown as MockSelfProtocol;
  }
}
