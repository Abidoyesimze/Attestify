/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface AttestifyVaultInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "MAX_DEPOSIT"
      | "MAX_TVL"
      | "MIN_DEPOSIT"
      | "RESERVE_RATIO"
      | "aavePool"
      | "acUSD"
      | "aiAgent"
      | "balanceOf"
      | "cUSD"
      | "changeStrategy"
      | "deposit"
      | "emergencyWithdraw"
      | "getCurrentAPY"
      | "getEarnings"
      | "getVaultStats"
      | "isVerified"
      | "lastRebalance"
      | "manualVerifyForTesting"
      | "owner"
      | "pause"
      | "paused"
      | "rebalance"
      | "renounceOwnership"
      | "selfProtocol"
      | "setAIAgent"
      | "setTreasury"
      | "shares"
      | "strategies"
      | "totalAssets"
      | "totalDeposited"
      | "totalShares"
      | "totalWithdrawn"
      | "transferOwnership"
      | "treasury"
      | "unpause"
      | "userStrategy"
      | "users"
      | "verifyIdentity"
      | "withdraw"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "DeployedToAave"
      | "Deposited"
      | "OwnershipTransferred"
      | "Paused"
      | "Rebalanced"
      | "StrategyChanged"
      | "Unpaused"
      | "UserVerified"
      | "Withdrawn"
      | "WithdrawnFromAave"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "MAX_DEPOSIT",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "MAX_TVL", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "MIN_DEPOSIT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "RESERVE_RATIO",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "aavePool", values?: undefined): string;
  encodeFunctionData(functionFragment: "acUSD", values?: undefined): string;
  encodeFunctionData(functionFragment: "aiAgent", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "cUSD", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "changeStrategy",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentAPY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getEarnings",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getVaultStats",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isVerified",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "lastRebalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "manualVerifyForTesting",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(functionFragment: "rebalance", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "selfProtocol",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAIAgent",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setTreasury",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "shares", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "strategies",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalAssets",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalDeposited",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalShares",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalWithdrawn",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "treasury", values?: undefined): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "userStrategy",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "users", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "verifyIdentity",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "MAX_DEPOSIT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "MAX_TVL", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "MIN_DEPOSIT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "RESERVE_RATIO",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "aavePool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "acUSD", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "aiAgent", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cUSD", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changeStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentAPY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEarnings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVaultStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isVerified", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastRebalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "manualVerifyForTesting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rebalance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "selfProtocol",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setAIAgent", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "shares", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "strategies", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalDeposited",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalWithdrawn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "treasury", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "userStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "users", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "verifyIdentity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export namespace DeployedToAaveEvent {
  export type InputTuple = [amount: BigNumberish, timestamp: BigNumberish];
  export type OutputTuple = [amount: bigint, timestamp: bigint];
  export interface OutputObject {
    amount: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DepositedEvent {
  export type InputTuple = [
    user: AddressLike,
    assets: BigNumberish,
    shares: BigNumberish
  ];
  export type OutputTuple = [user: string, assets: bigint, shares: bigint];
  export interface OutputObject {
    user: string;
    assets: bigint;
    shares: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RebalancedEvent {
  export type InputTuple = [
    aaveBalance: BigNumberish,
    reserveBalance: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    aaveBalance: bigint,
    reserveBalance: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    aaveBalance: bigint;
    reserveBalance: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StrategyChangedEvent {
  export type InputTuple = [
    user: AddressLike,
    oldStrategy: BigNumberish,
    newStrategy: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    oldStrategy: bigint,
    newStrategy: bigint
  ];
  export interface OutputObject {
    user: string;
    oldStrategy: bigint;
    newStrategy: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UserVerifiedEvent {
  export type InputTuple = [user: AddressLike, timestamp: BigNumberish];
  export type OutputTuple = [user: string, timestamp: bigint];
  export interface OutputObject {
    user: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawnEvent {
  export type InputTuple = [
    user: AddressLike,
    assets: BigNumberish,
    shares: BigNumberish
  ];
  export type OutputTuple = [user: string, assets: bigint, shares: bigint];
  export interface OutputObject {
    user: string;
    assets: bigint;
    shares: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawnFromAaveEvent {
  export type InputTuple = [amount: BigNumberish, timestamp: BigNumberish];
  export type OutputTuple = [amount: bigint, timestamp: bigint];
  export interface OutputObject {
    amount: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface AttestifyVault extends BaseContract {
  connect(runner?: ContractRunner | null): AttestifyVault;
  waitForDeployment(): Promise<this>;

  interface: AttestifyVaultInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  MAX_DEPOSIT: TypedContractMethod<[], [bigint], "view">;

  MAX_TVL: TypedContractMethod<[], [bigint], "view">;

  MIN_DEPOSIT: TypedContractMethod<[], [bigint], "view">;

  RESERVE_RATIO: TypedContractMethod<[], [bigint], "view">;

  aavePool: TypedContractMethod<[], [string], "view">;

  acUSD: TypedContractMethod<[], [string], "view">;

  aiAgent: TypedContractMethod<[], [string], "view">;

  balanceOf: TypedContractMethod<[user: AddressLike], [bigint], "view">;

  cUSD: TypedContractMethod<[], [string], "view">;

  changeStrategy: TypedContractMethod<
    [newStrategy: BigNumberish],
    [void],
    "nonpayable"
  >;

  deposit: TypedContractMethod<[assets: BigNumberish], [bigint], "nonpayable">;

  emergencyWithdraw: TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getCurrentAPY: TypedContractMethod<[], [bigint], "view">;

  getEarnings: TypedContractMethod<[user: AddressLike], [bigint], "view">;

  getVaultStats: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint] & {
        _totalAssets: bigint;
        _totalShares: bigint;
        reserveBalance: bigint;
        aaveBalance: bigint;
        _totalDeposited: bigint;
        _totalWithdrawn: bigint;
      }
    ],
    "view"
  >;

  isVerified: TypedContractMethod<[user: AddressLike], [boolean], "view">;

  lastRebalance: TypedContractMethod<[], [bigint], "view">;

  manualVerifyForTesting: TypedContractMethod<
    [user: AddressLike],
    [void],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  rebalance: TypedContractMethod<[], [void], "nonpayable">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  selfProtocol: TypedContractMethod<[], [string], "view">;

  setAIAgent: TypedContractMethod<
    [_aiAgent: AddressLike],
    [void],
    "nonpayable"
  >;

  setTreasury: TypedContractMethod<
    [_treasury: AddressLike],
    [void],
    "nonpayable"
  >;

  shares: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  strategies: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, bigint, bigint, bigint, boolean] & {
        name: string;
        aaveAllocation: bigint;
        reserveAllocation: bigint;
        targetAPY: bigint;
        riskLevel: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;

  totalAssets: TypedContractMethod<[], [bigint], "view">;

  totalDeposited: TypedContractMethod<[], [bigint], "view">;

  totalShares: TypedContractMethod<[], [bigint], "view">;

  totalWithdrawn: TypedContractMethod<[], [bigint], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  treasury: TypedContractMethod<[], [string], "view">;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  userStrategy: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  users: TypedContractMethod<
    [arg0: AddressLike],
    [
      [boolean, bigint, bigint, bigint, bigint] & {
        isVerified: boolean;
        verifiedAt: bigint;
        totalDeposited: bigint;
        totalWithdrawn: bigint;
        lastActionTime: bigint;
      }
    ],
    "view"
  >;

  verifyIdentity: TypedContractMethod<[proof: BytesLike], [void], "nonpayable">;

  withdraw: TypedContractMethod<[assets: BigNumberish], [bigint], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "MAX_DEPOSIT"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MAX_TVL"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MIN_DEPOSIT"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "RESERVE_RATIO"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "aavePool"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "acUSD"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "aiAgent"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "cUSD"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "changeStrategy"
  ): TypedContractMethod<[newStrategy: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "deposit"
  ): TypedContractMethod<[assets: BigNumberish], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "emergencyWithdraw"
  ): TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getCurrentAPY"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getEarnings"
  ): TypedContractMethod<[user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getVaultStats"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint] & {
        _totalAssets: bigint;
        _totalShares: bigint;
        reserveBalance: bigint;
        aaveBalance: bigint;
        _totalDeposited: bigint;
        _totalWithdrawn: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "isVerified"
  ): TypedContractMethod<[user: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "lastRebalance"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "manualVerifyForTesting"
  ): TypedContractMethod<[user: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "rebalance"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "selfProtocol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "setAIAgent"
  ): TypedContractMethod<[_aiAgent: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setTreasury"
  ): TypedContractMethod<[_treasury: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "shares"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "strategies"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, bigint, bigint, bigint, boolean] & {
        name: string;
        aaveAllocation: bigint;
        reserveAllocation: bigint;
        targetAPY: bigint;
        riskLevel: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "totalAssets"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalDeposited"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalShares"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalWithdrawn"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "treasury"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "userStrategy"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "users"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [boolean, bigint, bigint, bigint, bigint] & {
        isVerified: boolean;
        verifiedAt: bigint;
        totalDeposited: bigint;
        totalWithdrawn: bigint;
        lastActionTime: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "verifyIdentity"
  ): TypedContractMethod<[proof: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<[assets: BigNumberish], [bigint], "nonpayable">;

  getEvent(
    key: "DeployedToAave"
  ): TypedContractEvent<
    DeployedToAaveEvent.InputTuple,
    DeployedToAaveEvent.OutputTuple,
    DeployedToAaveEvent.OutputObject
  >;
  getEvent(
    key: "Deposited"
  ): TypedContractEvent<
    DepositedEvent.InputTuple,
    DepositedEvent.OutputTuple,
    DepositedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "Rebalanced"
  ): TypedContractEvent<
    RebalancedEvent.InputTuple,
    RebalancedEvent.OutputTuple,
    RebalancedEvent.OutputObject
  >;
  getEvent(
    key: "StrategyChanged"
  ): TypedContractEvent<
    StrategyChangedEvent.InputTuple,
    StrategyChangedEvent.OutputTuple,
    StrategyChangedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;
  getEvent(
    key: "UserVerified"
  ): TypedContractEvent<
    UserVerifiedEvent.InputTuple,
    UserVerifiedEvent.OutputTuple,
    UserVerifiedEvent.OutputObject
  >;
  getEvent(
    key: "Withdrawn"
  ): TypedContractEvent<
    WithdrawnEvent.InputTuple,
    WithdrawnEvent.OutputTuple,
    WithdrawnEvent.OutputObject
  >;
  getEvent(
    key: "WithdrawnFromAave"
  ): TypedContractEvent<
    WithdrawnFromAaveEvent.InputTuple,
    WithdrawnFromAaveEvent.OutputTuple,
    WithdrawnFromAaveEvent.OutputObject
  >;

  filters: {
    "DeployedToAave(uint256,uint256)": TypedContractEvent<
      DeployedToAaveEvent.InputTuple,
      DeployedToAaveEvent.OutputTuple,
      DeployedToAaveEvent.OutputObject
    >;
    DeployedToAave: TypedContractEvent<
      DeployedToAaveEvent.InputTuple,
      DeployedToAaveEvent.OutputTuple,
      DeployedToAaveEvent.OutputObject
    >;

    "Deposited(address,uint256,uint256)": TypedContractEvent<
      DepositedEvent.InputTuple,
      DepositedEvent.OutputTuple,
      DepositedEvent.OutputObject
    >;
    Deposited: TypedContractEvent<
      DepositedEvent.InputTuple,
      DepositedEvent.OutputTuple,
      DepositedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "Rebalanced(uint256,uint256,uint256)": TypedContractEvent<
      RebalancedEvent.InputTuple,
      RebalancedEvent.OutputTuple,
      RebalancedEvent.OutputObject
    >;
    Rebalanced: TypedContractEvent<
      RebalancedEvent.InputTuple,
      RebalancedEvent.OutputTuple,
      RebalancedEvent.OutputObject
    >;

    "StrategyChanged(address,uint8,uint8)": TypedContractEvent<
      StrategyChangedEvent.InputTuple,
      StrategyChangedEvent.OutputTuple,
      StrategyChangedEvent.OutputObject
    >;
    StrategyChanged: TypedContractEvent<
      StrategyChangedEvent.InputTuple,
      StrategyChangedEvent.OutputTuple,
      StrategyChangedEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;

    "UserVerified(address,uint256)": TypedContractEvent<
      UserVerifiedEvent.InputTuple,
      UserVerifiedEvent.OutputTuple,
      UserVerifiedEvent.OutputObject
    >;
    UserVerified: TypedContractEvent<
      UserVerifiedEvent.InputTuple,
      UserVerifiedEvent.OutputTuple,
      UserVerifiedEvent.OutputObject
    >;

    "Withdrawn(address,uint256,uint256)": TypedContractEvent<
      WithdrawnEvent.InputTuple,
      WithdrawnEvent.OutputTuple,
      WithdrawnEvent.OutputObject
    >;
    Withdrawn: TypedContractEvent<
      WithdrawnEvent.InputTuple,
      WithdrawnEvent.OutputTuple,
      WithdrawnEvent.OutputObject
    >;

    "WithdrawnFromAave(uint256,uint256)": TypedContractEvent<
      WithdrawnFromAaveEvent.InputTuple,
      WithdrawnFromAaveEvent.OutputTuple,
      WithdrawnFromAaveEvent.OutputObject
    >;
    WithdrawnFromAave: TypedContractEvent<
      WithdrawnFromAaveEvent.InputTuple,
      WithdrawnFromAaveEvent.OutputTuple,
      WithdrawnFromAaveEvent.OutputObject
    >;
  };
}
