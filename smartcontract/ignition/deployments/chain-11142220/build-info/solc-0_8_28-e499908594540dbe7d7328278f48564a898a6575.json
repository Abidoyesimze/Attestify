{
  "_format": "hh3-sol-build-info-1",
  "id": "solc-0_8_28-e499908594540dbe7d7328278f48564a898a6575",
  "solcVersion": "0.8.28",
  "solcLongVersion": "0.8.28+commit.7893614a",
  "userSourceNameMap": {
    "contracts/AttestifyVault.sol": "project/contracts/AttestifyVault.sol"
  },
  "input": {
    "language": "Solidity",
    "settings": {
      "evmVersion": "cancun",
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "outputSelection": {
        "*": {
          "": [
            "ast"
          ],
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers",
            "metadata"
          ]
        }
      },
      "remappings": [
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@selfxyz/contracts/=npm/@selfxyz/contracts@1.2.3/",
        "project/:@selfxyz/contracts/=npm/@selfxyz/contracts@1.2.3/",
        "project/:@selfxyz/contracts/=npm/@selfxyz/contracts@1.2.3/"
      ]
    },
    "sources": {
      "npm/@openzeppelin/contracts@5.4.0/access/Ownable.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/interfaces/IERC1363.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC1363.sol)\n\npragma solidity >=0.6.2;\n\nimport {IERC20} from \"./IERC20.sol\";\nimport {IERC165} from \"./IERC165.sol\";\n\n/**\n * @title IERC1363\n * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\n *\n * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\n * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\n */\ninterface IERC1363 is IERC20, IERC165 {\n    /*\n     * Note: the ERC-165 identifier for this interface is 0xb0202a11.\n     * 0xb0202a11 ===\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\n     */\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferAndCall(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @param data Additional data with no specified format, sent in call to `to`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param from The address which you want to send tokens from.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param from The address which you want to send tokens from.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @param data Additional data with no specified format, sent in call to `to`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function approveAndCall(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     * @param data Additional data with no specified format, sent in call to `spender`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/interfaces/IERC165.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC165.sol)\n\npragma solidity >=0.4.16;\n\nimport {IERC165} from \"../utils/introspection/IERC165.sol\";\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/interfaces/IERC20.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC20.sol)\n\npragma solidity >=0.4.16;\n\nimport {IERC20} from \"../token/ERC20/IERC20.sol\";\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/token/ERC20/IERC20.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/IERC20.sol)\n\npragma solidity >=0.4.16;\n\n/**\n * @dev Interface of the ERC-20 standard as defined in the ERC.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/token/ERC20/utils/SafeERC20.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.3.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\nimport {IERC1363} from \"../../../interfaces/IERC1363.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC-20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    /**\n     * @dev An operation with an ERC-20 token failed.\n     */\n    error SafeERC20FailedOperation(address token);\n\n    /**\n     * @dev Indicates a failed `decreaseAllowance` request.\n     */\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\n    }\n\n    /**\n     * @dev Variant of {safeTransfer} that returns a bool instead of reverting if the operation is not successful.\n     */\n    function trySafeTransfer(IERC20 token, address to, uint256 value) internal returns (bool) {\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transfer, (to, value)));\n    }\n\n    /**\n     * @dev Variant of {safeTransferFrom} that returns a bool instead of reverting if the operation is not successful.\n     */\n    function trySafeTransferFrom(IERC20 token, address from, address to, uint256 value) internal returns (bool) {\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transferFrom, (from, to, value)));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     *\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \"client\"\n     * smart contract uses ERC-7674 to set temporary allowances, then the \"client\" smart contract should avoid using\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        forceApprove(token, spender, oldAllowance + value);\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\n     * value, non-reverting calls are assumed to be successful.\n     *\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \"client\"\n     * smart contract uses ERC-7674 to set temporary allowances, then the \"client\" smart contract should avoid using\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\n        unchecked {\n            uint256 currentAllowance = token.allowance(address(this), spender);\n            if (currentAllowance < requestedDecrease) {\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\n            }\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     *\n     * NOTE: If the token implements ERC-7674, this function will not modify any temporary allowance. This function\n     * only sets the \"standard\" allowance. Any temporary allowance will remain active, in addition to the value being\n     * set here.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function transferAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\n        if (to.code.length == 0) {\n            safeTransfer(token, to, value);\n        } else if (!token.transferAndCall(to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\n     * has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function transferFromAndCallRelaxed(\n        IERC1363 token,\n        address from,\n        address to,\n        uint256 value,\n        bytes memory data\n    ) internal {\n        if (to.code.length == 0) {\n            safeTransferFrom(token, from, to, value);\n        } else if (!token.transferFromAndCall(from, to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\n     * Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\n     * once without retrying, and relies on the returned value to be true.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function approveAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\n        if (to.code.length == 0) {\n            forceApprove(token, to, value);\n        } else if (!token.approveAndCall(to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturnBool} that reverts if call fails to meet the requirements.\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        uint256 returnSize;\n        uint256 returnValue;\n        assembly (\"memory-safe\") {\n            let success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\n            // bubble errors\n            if iszero(success) {\n                let ptr := mload(0x40)\n                returndatacopy(ptr, 0, returndatasize())\n                revert(ptr, returndatasize())\n            }\n            returnSize := returndatasize()\n            returnValue := mload(0)\n        }\n\n        if (returnSize == 0 ? address(token).code.length == 0 : returnValue != 1) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silently catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        bool success;\n        uint256 returnSize;\n        uint256 returnValue;\n        assembly (\"memory-safe\") {\n            success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\n            returnSize := returndatasize()\n            returnValue := mload(0)\n        }\n        return success && (returnSize == 0 ? address(token).code.length > 0 : returnValue == 1);\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/utils/Context.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/utils/introspection/IERC165.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/introspection/IERC165.sol)\n\npragma solidity >=0.4.16;\n\n/**\n * @dev Interface of the ERC-165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/utils/Pausable.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.3.0) (utils/Pausable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    bool private _paused;\n\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    /**\n     * @dev The operation failed because the contract is paused.\n     */\n    error EnforcedPause();\n\n    /**\n     * @dev The operation failed because the contract is not paused.\n     */\n    error ExpectedPause();\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        if (paused()) {\n            revert EnforcedPause();\n        }\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        if (!paused()) {\n            revert ExpectedPause();\n        }\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/utils/ReentrancyGuard.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\n * consider using {ReentrancyGuardTransient} instead.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant NOT_ENTERED = 1;\n    uint256 private constant ENTERED = 2;\n\n    uint256 private _status;\n\n    /**\n     * @dev Unauthorized reentrant call.\n     */\n    error ReentrancyGuardReentrantCall();\n\n    constructor() {\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\n        if (_status == ENTERED) {\n            revert ReentrancyGuardReentrantCall();\n        }\n\n        // Any calls to nonReentrant after this point will fail\n        _status = ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == ENTERED;\n    }\n}\n"
      },
      "npm/@selfxyz/contracts@1.2.3/contracts/abstract/SelfVerificationRoot.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.28;\n\nimport {IPoseidonT3} from \"../interfaces/IPoseidonT3.sol\";\nimport {IIdentityVerificationHubV2} from \"../interfaces/IIdentityVerificationHubV2.sol\";\nimport {ISelfVerificationRoot} from \"../interfaces/ISelfVerificationRoot.sol\";\nimport {CircuitConstantsV2} from \"../constants/CircuitConstantsV2.sol\";\nimport {AttestationId} from \"../constants/AttestationId.sol\";\nimport {SelfUtils} from \"../libraries/SelfUtils.sol\";\nimport {Formatter} from \"../libraries/Formatter.sol\";\n\n/**\n * @title SelfVerificationRoot\n * @notice Abstract base contract to be integrated with self's verification infrastructure\n * @dev Provides base functionality for verifying and disclosing identity credentials\n * @author Self Team\n */\nabstract contract SelfVerificationRoot is ISelfVerificationRoot {\n    // ====================================================\n    // Constants\n    // ====================================================\n\n    /// @notice Contract version identifier used in verification process\n    /// @dev This version is included in the hub data for protocol compatibility\n    uint8 constant CONTRACT_VERSION = 2;\n\n    // ====================================================\n    // Storage Variables\n    // ====================================================\n\n    /// @notice The scope value that proofs must match\n    /// @dev Used to validate that submitted proofs match the expected scope\n    uint256 internal _scope;\n\n    /// @notice Reference to the identity verification hub V2 contract\n    /// @dev Immutable reference used for bytes-based proof verification\n    IIdentityVerificationHubV2 internal immutable _identityVerificationHubV2;\n\n    // ====================================================\n    // Errors\n    // ====================================================\n\n    /// @notice Error thrown when the data format is invalid\n    /// @dev Triggered when the provided bytes data doesn't have the expected format\n    error InvalidDataFormat();\n\n    /// @notice Error thrown when onVerificationSuccess is called by an unauthorized address\n    /// @dev Only the identity verification hub V2 contract can call onVerificationSuccess\n    error UnauthorizedCaller();\n\n    // ====================================================\n    // Events\n    // ====================================================\n\n    /**\n     * @notice Initializes the SelfVerificationRoot contract\n     * @dev Sets up the immutable reference to the hub contract and generates scope automatically\n     * @param identityVerificationHubV2Address The address of the Identity Verification Hub V2\n     * @param scopeSeed The scope seed string to be hashed with contract address to generate the scope\n     */\n    constructor(address identityVerificationHubV2Address, string memory scopeSeed) {\n        _identityVerificationHubV2 = IIdentityVerificationHubV2(identityVerificationHubV2Address);\n        _scope = _calculateScope(address(this), scopeSeed, _getPoseidonAddress());\n    }\n\n    /**\n     * @notice Returns the current scope value\n     * @dev Public view function to access the current scope setting\n     * @return The scope value that proofs must match\n     */\n    function scope() public view returns (uint256) {\n        return _scope;\n    }\n\n    /**\n     * @notice Verifies a self-proof using the bytes-based interface\n     * @dev Parses relayer data format and validates against contract settings before calling hub V2\n     * @param proofPayload Packed data from relayer in format: | 32 bytes attestationId | proof data |\n     * @param userContextData User-defined data in format: | 32 bytes destChainId | 32 bytes userIdentifier | data |\n     * @custom:data-format proofPayload = | 32 bytes attestationId | proofData |\n     * @custom:data-format userContextData = | 32 bytes destChainId | 32 bytes userIdentifier | data |\n     * @custom:data-format hubData = | 1 bytes contract version | 31 bytes buffer | 32 bytes scope | 32 bytes attestationId | proofData |\n     */\n    function verifySelfProof(bytes calldata proofPayload, bytes calldata userContextData) public {\n        // Minimum expected length for proofData: 32 bytes attestationId + proof data\n        if (proofPayload.length < 32) {\n            revert InvalidDataFormat();\n        }\n\n        // Minimum userDefinedData length: 32 (destChainId) + 32 (userIdentifier) + 0 (userDefinedData) = 64 bytes\n        if (userContextData.length < 64) {\n            revert InvalidDataFormat();\n        }\n\n        bytes32 attestationId;\n        assembly {\n            // Load attestationId from the beginning of proofData (first 32 bytes)\n            attestationId := calldataload(proofPayload.offset)\n        }\n\n        bytes32 destinationChainId = bytes32(userContextData[0:32]);\n        bytes32 userIdentifier = bytes32(userContextData[32:64]);\n        bytes memory userDefinedData = userContextData[64:];\n\n        bytes32 configId = getConfigId(destinationChainId, userIdentifier, userDefinedData);\n\n        // Hub data should be | 1 byte contractVersion | 31 bytes buffer | 32 bytes scope | 32 bytes attestationId | proof data\n        bytes memory baseVerificationInput = abi.encodePacked(\n            // 1 byte contractVersion\n            CONTRACT_VERSION,\n            // 31 bytes buffer (all zeros)\n            bytes31(0),\n            // 32 bytes scope\n            _scope,\n            proofPayload\n        );\n\n        // Call hub V2 verification\n        _identityVerificationHubV2.verify(baseVerificationInput, bytes.concat(configId, userContextData));\n    }\n\n    /**\n     * @notice Callback function called upon successful verification by the hub contract\n     * @dev Only callable by the identity verification hub V2 contract for security\n     * @param output The verification output data containing disclosed identity information\n     * @param userData The user-defined data passed through the verification process\n     * @custom:security Only the authorized hub contract can call this function\n     * @custom:flow This function decodes the output and calls the customizable verification hook\n     */\n    function onVerificationSuccess(bytes memory output, bytes memory userData) public {\n        // Only allow the identity verification hub V2 to call this function\n        if (msg.sender != address(_identityVerificationHubV2)) {\n            revert UnauthorizedCaller();\n        }\n\n        ISelfVerificationRoot.GenericDiscloseOutputV2 memory genericDiscloseOutput = abi.decode(\n            output,\n            (ISelfVerificationRoot.GenericDiscloseOutputV2)\n        );\n\n        // Call the customizable verification hook\n        customVerificationHook(genericDiscloseOutput, userData);\n    }\n\n    /**\n     * @notice Generates a configId for the user\n     * @dev This function should be overridden by the implementing contract to provide custom configId logic\n     * @param destinationChainId The destination chain ID\n     * @param userIdentifier The user identifier\n     * @param userDefinedData The user defined data\n     * @return The configId\n     */\n    function getConfigId(\n        bytes32 destinationChainId,\n        bytes32 userIdentifier,\n        bytes memory userDefinedData\n    ) public view virtual returns (bytes32) {\n        // Default implementation reverts; must be overridden in derived contract\n        revert(\"SelfVerificationRoot: getConfigId must be overridden\");\n    }\n\n    /**\n     * @notice Custom verification hook that can be overridden by implementing contracts\n     * @dev This function is called after successful verification and hub address validation\n     * @param output The verification output data from the hub containing disclosed identity information\n     * @param userData The user-defined data passed through the verification process\n     * @custom:override Override this function in derived contracts to add custom verification logic\n     * @custom:security This function is only called after proper authentication by the hub contract\n     */\n    function customVerificationHook(\n        ISelfVerificationRoot.GenericDiscloseOutputV2 memory output,\n        bytes memory userData\n    ) internal virtual {\n        // Default implementation is empty - override in derived contracts to add custom logic\n    }\n\n    /**\n     * @notice Gets the PoseidonT3 library address for the current chain\n     * @dev Returns hardcoded addresses of pre-deployed PoseidonT3 library on current chain\n     * @dev For local development networks, should create a setter function to set the scope manually\n     * @return The address of the PoseidonT3 library on this chain\n     */\n    function _getPoseidonAddress() internal view returns (address) {\n        uint256 chainId = block.chainid;\n\n        // Celo Mainnet\n        if (chainId == 42220) {\n            return 0xF134707a4C4a3a76b8410fC0294d620A7c341581;\n        }\n\n        // Celo Sepolia\n        if (chainId == 11142220) {\n            return 0x0a782f7F9f8Aac6E0bacAF3cD4aA292C3275C6f2;\n        }\n\n        // For local/development networks or other chains, return zero address\n        return address(0);\n    }\n\n    /**\n     * @notice Calculates scope from contract address, scope seed, and PoseidonT3 address\n     * @param contractAddress The contract address to hash\n     * @param scopeSeed The scope seed string\n     * @param poseidonT3Address The address of the PoseidonT3 library to use\n     * @return The calculated scope value\n     */\n    function _calculateScope(\n        address contractAddress,\n        string memory scopeSeed,\n        address poseidonT3Address\n    ) internal view returns (uint256) {\n        // Skip calculation if PoseidonT3 address is zero (local development)\n        if (poseidonT3Address == address(0)) {\n            return 0;\n        }\n\n        uint256 addressHash = _calculateAddressHashWithPoseidon(contractAddress, poseidonT3Address);\n        uint256 scopeSeedAsUint = SelfUtils.stringToBigInt(scopeSeed);\n        return IPoseidonT3(poseidonT3Address).hash([addressHash, scopeSeedAsUint]);\n    }\n\n    /**\n     * @notice Calculates hash of contract address using frontend-compatible chunking with specific PoseidonT3\n     * @dev Converts address to hex string, splits into 2 chunks (31+11), and hashes with provided PoseidonT3\n     * @param addr The contract address to hash\n     * @param poseidonT3Address The address of the PoseidonT3 library to use\n     * @return The hash result equivalent to frontend's endpointHash for addresses\n     */\n    function _calculateAddressHashWithPoseidon(\n        address addr,\n        address poseidonT3Address\n    ) internal view returns (uint256) {\n        // Convert address to hex string (42 chars: \"0x\" + 40 hex digits)\n        string memory addressString = SelfUtils.addressToHexString(addr);\n\n        // Split into exactly 2 chunks: 31 + 11 characters\n        // Chunk 1: characters 0-30 (31 chars)\n        // Chunk 2: characters 31-41 (11 chars)\n        uint256 chunk1BigInt = SelfUtils.stringToBigInt(Formatter.substring(addressString, 0, 31));\n        uint256 chunk2BigInt = SelfUtils.stringToBigInt(Formatter.substring(addressString, 31, 42));\n\n        return IPoseidonT3(poseidonT3Address).hash([chunk1BigInt, chunk2BigInt]);\n    }\n}\n"
      },
      "npm/@selfxyz/contracts@1.2.3/contracts/constants/AttestationId.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.28;\n\n/**\n * @title AttestationId Library\n * @notice This library provides attestation identifiers used across contracts.\n * @dev Currently, it contains the constant E_PASSPORT which represents the identifier\n * for an E-PASSPORT attestation computed as Poseidon(\"E-PASSPORT\").\n */\nlibrary AttestationId {\n    /**\n     * @notice Identifier for an E-PASSPORT attestation.\n     * @dev The identifier is computed based on the hash of \"E-PASSPORT\" using the Poseidon hash function.\n     * Here it is hardcoded as bytes32(uint256(1)) for demonstration purposes.\n     */\n    bytes32 constant E_PASSPORT = bytes32(uint256(1));\n    bytes32 constant EU_ID_CARD = bytes32(uint256(2));\n    bytes32 constant AADHAAR = bytes32(uint256(3));\n}\n"
      },
      "npm/@selfxyz/contracts@1.2.3/contracts/constants/CircuitConstantsV2.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.28;\n\nimport {AttestationId} from \"./AttestationId.sol\";\n\n/**\n * @title Circuit Constants Library\n * @notice This library defines constants representing indices used to access public signals\n *         of various circuits such as register, DSC, and VC/Disclose.\n * @dev These indices map directly to specific data fields in the corresponding circuits proofs.\n */\nlibrary CircuitConstantsV2 {\n    // ---------------------------\n    // Register Circuit Constants\n    // ---------------------------\n\n    /**\n     * @notice Index to access the nullifier in the register circuit public signals.\n     */\n    uint256 constant REGISTER_NULLIFIER_INDEX = 0;\n\n    /**\n     * @notice Index to access the commitment in the register circuit public signals.\n     */\n    uint256 constant REGISTER_COMMITMENT_INDEX = 1;\n\n    /**\n     * @notice Index to access the Merkle root in the register circuit public signals.\n     */\n    uint256 constant REGISTER_MERKLE_ROOT_INDEX = 2;\n\n    // ---------------------------\n    // DSC Circuit Constants\n    // ---------------------------\n\n    /**\n     * @notice Index to access the tree leaf in the DSC circuit public signals.\n     */\n    uint256 constant DSC_TREE_LEAF_INDEX = 0;\n\n    /**\n     * @notice Index to access the CSCA root in the DSC circuit public signals.\n     */\n    uint256 constant DSC_CSCA_ROOT_INDEX = 1;\n\n    // ---------------------------\n    // Aadhaar Circuit Constants\n    // ---------------------------\n    /**\n     * @notice Index to access the pubkey commitment in the Aadhaar circuit public signals.\n     */\n    uint256 constant AADHAAR_UIDAI_PUBKEY_COMMITMENT_INDEX = 0;\n    uint256 constant AADHAAR_NULLIFIER_INDEX = 1;\n    uint256 constant AADHAAR_COMMITMENT_INDEX = 2;\n    uint256 constant AADHAAR_TIMESTAMP_INDEX = 3;\n\n    // -------------------------------------\n    // VC and Disclose Circuit Constants\n    // -------------------------------------\n\n    /**\n     * @notice Structure containing circuit indices for a specific attestation type.\n     */\n    struct DiscloseIndices {\n        uint256 revealedDataPackedIndex;\n        uint256 forbiddenCountriesListPackedIndex;\n        uint256 nullifierIndex;\n        uint256 attestationIdIndex;\n        uint256 merkleRootIndex;\n        uint256 currentDateIndex;\n        uint256 namedobSmtRootIndex;\n        uint256 nameyobSmtRootIndex;\n        uint256 scopeIndex;\n        uint256 userIdentifierIndex;\n        uint256 passportNoSmtRootIndex;\n    }\n\n    /**\n     * @notice Returns the circuit indices for a given attestation type.\n     * @param attestationId The attestation identifier.\n     * @return indices The DiscloseIndices struct containing all relevant indices.\n     */\n    function getDiscloseIndices(bytes32 attestationId) internal pure returns (DiscloseIndices memory indices) {\n        if (attestationId == AttestationId.E_PASSPORT) {\n            return\n                DiscloseIndices({\n                    revealedDataPackedIndex: 0,\n                    forbiddenCountriesListPackedIndex: 3,\n                    nullifierIndex: 7,\n                    attestationIdIndex: 8,\n                    merkleRootIndex: 9,\n                    currentDateIndex: 10,\n                    namedobSmtRootIndex: 17,\n                    nameyobSmtRootIndex: 18,\n                    scopeIndex: 19,\n                    userIdentifierIndex: 20,\n                    passportNoSmtRootIndex: 16\n                });\n        } else if (attestationId == AttestationId.EU_ID_CARD) {\n            return\n                DiscloseIndices({\n                    revealedDataPackedIndex: 0,\n                    forbiddenCountriesListPackedIndex: 4,\n                    nullifierIndex: 8,\n                    attestationIdIndex: 9,\n                    merkleRootIndex: 10,\n                    currentDateIndex: 11,\n                    namedobSmtRootIndex: 17,\n                    nameyobSmtRootIndex: 18,\n                    scopeIndex: 19,\n                    userIdentifierIndex: 20,\n                    passportNoSmtRootIndex: 99\n                });\n        } else if (attestationId == AttestationId.AADHAAR) {\n            return\n                DiscloseIndices({\n                    revealedDataPackedIndex: 2,\n                    forbiddenCountriesListPackedIndex: 6,\n                    nullifierIndex: 0,\n                    attestationIdIndex: 10,\n                    merkleRootIndex: 16,\n                    currentDateIndex: 11,\n                    namedobSmtRootIndex: 14,\n                    nameyobSmtRootIndex: 15,\n                    scopeIndex: 17,\n                    userIdentifierIndex: 18,\n                    passportNoSmtRootIndex: 99\n                });\n        } else {\n            revert(\"Invalid attestation ID\");\n        }\n    }\n}\n"
      },
      "npm/@selfxyz/contracts@1.2.3/contracts/interfaces/IDscCircuitVerifier.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.28;\n\n/**\n * @title IDscCircuitVerifier\n * @notice Interface for verifying zero-knowledge proofs related to the DSC circuit.\n * @dev This interface defines the structure of a DSC circuit proof and exposes a function to verify such proofs.\n */\ninterface IDscCircuitVerifier {\n    /**\n     * @notice Represents a DSC circuit proof.\n     * @param a An array of two unsigned integers representing the proof component 'a'.\n     * @param b A 2x2 array of unsigned integers representing the proof component 'b'.\n     * @param c An array of two unsigned integers representing the proof component 'c'.\n     * @param pubSignals An array of two unsigned integers representing the public signals associated with the proof.\n     */\n    struct DscCircuitProof {\n        uint256[2] a;\n        uint256[2][2] b;\n        uint256[2] c;\n        uint256[2] pubSignals;\n    }\n\n    /**\n     * @notice Verifies a given DSC circuit zero-knowledge proof.\n     * @dev This function checks the validity of the provided DSC proof parameters.\n     * @param pA The 'a' component of the proof.\n     * @param pB The 'b' component of the proof.\n     * @param pC The 'c' component of the proof.\n     * @param pubSignals The public signals associated with the proof.\n     * @return A boolean value indicating whether the provided proof is valid (true) or not (false).\n     */\n    function verifyProof(\n        uint256[2] calldata pA,\n        uint256[2][2] calldata pB,\n        uint256[2] calldata pC,\n        uint256[2] calldata pubSignals\n    ) external view returns (bool);\n}\n"
      },
      "npm/@selfxyz/contracts@1.2.3/contracts/interfaces/IIdentityVerificationHubV2.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.28;\n\nimport {IRegisterCircuitVerifier} from \"./IRegisterCircuitVerifier.sol\";\nimport {IDscCircuitVerifier} from \"./IDscCircuitVerifier.sol\";\nimport {SelfStructs} from \"../libraries/SelfStructs.sol\";\n\n/**\n * @title IIdentityVerificationHubV2\n * @notice Interface for the Identity Verification Hub V2 for verifying zero-knowledge proofs.\n * @dev Defines all external and public functions from IdentityVerificationHubImplV2.\n */\ninterface IIdentityVerificationHubV2 {\n    // ====================================================\n    // External Functions\n    // ====================================================\n\n    /**\n     * @notice Registers a commitment using a register circuit proof.\n     * @dev Verifies the register circuit proof and then calls the Identity Registry to register the commitment.\n     * @param attestationId The attestation ID.\n     * @param registerCircuitVerifierId The identifier for the register circuit verifier to use.\n     * @param registerCircuitProof The register circuit proof data.\n     */\n    function registerCommitment(\n        bytes32 attestationId,\n        uint256 registerCircuitVerifierId,\n        IRegisterCircuitVerifier.RegisterCircuitProof memory registerCircuitProof\n    ) external;\n\n    /**\n     * @notice Registers a DSC key commitment using a DSC circuit proof.\n     * @dev Verifies the DSC proof and then calls the Identity Registry to register the dsc key commitment.\n     * @param attestationId The attestation ID.\n     * @param dscCircuitVerifierId The identifier for the DSC circuit verifier to use.\n     * @param dscCircuitProof The DSC circuit proof data.\n     */\n    function registerDscKeyCommitment(\n        bytes32 attestationId,\n        uint256 dscCircuitVerifierId,\n        IDscCircuitVerifier.DscCircuitProof memory dscCircuitProof\n    ) external;\n\n    /**\n     * @notice Sets verification config in V2 storage (owner only)\n     * @dev The configId is automatically generated from the config content using sha256(abi.encode(config))\n     * @param config The verification configuration\n     * @return configId The generated config ID\n     */\n    function setVerificationConfigV2(\n        SelfStructs.VerificationConfigV2 memory config\n    ) external returns (bytes32 configId);\n\n    /**\n     * @notice Main verification function with new structured input format\n     * @param baseVerificationInput The base verification input data\n     * @param userContextData The user context data\n     */\n    function verify(bytes calldata baseVerificationInput, bytes calldata userContextData) external;\n\n    /**\n     * @notice Updates the registry address.\n     * @param attestationId The attestation ID.\n     * @param registryAddress The new registry address.\n     */\n    function updateRegistry(bytes32 attestationId, address registryAddress) external;\n\n    /**\n     * @notice Updates the VC and Disclose circuit verifier address.\n     * @param attestationId The attestation ID.\n     * @param vcAndDiscloseCircuitVerifierAddress The new VC and Disclose circuit verifier address.\n     */\n    function updateVcAndDiscloseCircuit(bytes32 attestationId, address vcAndDiscloseCircuitVerifierAddress) external;\n\n    /**\n     * @notice Updates the register circuit verifier for a specific signature type.\n     * @param attestationId The attestation identifier.\n     * @param typeId The signature type identifier.\n     * @param verifierAddress The new register circuit verifier address.\n     */\n    function updateRegisterCircuitVerifier(bytes32 attestationId, uint256 typeId, address verifierAddress) external;\n\n    /**\n     * @notice Updates the DSC circuit verifier for a specific signature type.\n     * @param attestationId The attestation identifier.\n     * @param typeId The signature type identifier.\n     * @param verifierAddress The new DSC circuit verifier address.\n     */\n    function updateDscVerifier(bytes32 attestationId, uint256 typeId, address verifierAddress) external;\n\n    /**\n     * @notice Batch updates register circuit verifiers.\n     * @param attestationIds An array of attestation identifiers.\n     * @param typeIds An array of signature type identifiers.\n     * @param verifierAddresses An array of new register circuit verifier addresses.\n     */\n    function batchUpdateRegisterCircuitVerifiers(\n        bytes32[] calldata attestationIds,\n        uint256[] calldata typeIds,\n        address[] calldata verifierAddresses\n    ) external;\n\n    /**\n     * @notice Batch updates DSC circuit verifiers.\n     * @param attestationIds An array of attestation identifiers.\n     * @param typeIds An array of signature type identifiers.\n     * @param verifierAddresses An array of new DSC circuit verifier addresses.\n     */\n    function batchUpdateDscCircuitVerifiers(\n        bytes32[] calldata attestationIds,\n        uint256[] calldata typeIds,\n        address[] calldata verifierAddresses\n    ) external;\n\n    // ====================================================\n    // External View Functions\n    // ====================================================\n\n    /**\n     * @notice Returns the registry address for a given attestation ID.\n     * @param attestationId The attestation ID to query.\n     * @return The registry address associated with the attestation ID.\n     */\n    function registry(bytes32 attestationId) external view returns (address);\n\n    /**\n     * @notice Returns the disclose verifier address for a given attestation ID.\n     * @param attestationId The attestation ID to query.\n     * @return The disclose verifier address associated with the attestation ID.\n     */\n    function discloseVerifier(bytes32 attestationId) external view returns (address);\n\n    /**\n     * @notice Returns the register circuit verifier address for a given attestation ID and type ID.\n     * @param attestationId The attestation ID to query.\n     * @param typeId The type ID to query.\n     * @return The register circuit verifier address associated with the attestation ID and type ID.\n     */\n    function registerCircuitVerifiers(bytes32 attestationId, uint256 typeId) external view returns (address);\n\n    /**\n     * @notice Returns the DSC circuit verifier address for a given attestation ID and type ID.\n     * @param attestationId The attestation ID to query.\n     * @param typeId The type ID to query.\n     * @return The DSC circuit verifier address associated with the attestation ID and type ID.\n     */\n    function dscCircuitVerifiers(bytes32 attestationId, uint256 typeId) external view returns (address);\n\n    /**\n     * @notice Returns the merkle root timestamp for a given attestation ID and root.\n     * @param attestationId The attestation ID to query.\n     * @param root The merkle root to query.\n     * @return The merkle root timestamp associated with the attestation ID and root.\n     */\n    function rootTimestamp(bytes32 attestationId, uint256 root) external view returns (uint256);\n\n    /**\n     * @notice Returns the identity commitment merkle root for a given attestation ID.\n     * @param attestationId The attestation ID to query.\n     * @return The identity commitment merkle root associated with the attestation ID.\n     */\n    function getIdentityCommitmentMerkleRoot(bytes32 attestationId) external view returns (uint256);\n\n    /**\n     * @notice Checks if a verification config exists\n     * @param configId The configuration identifier\n     * @return exists Whether the config exists\n     */\n    function verificationConfigV2Exists(bytes32 configId) external view returns (bool exists);\n\n    // ====================================================\n    // Public Functions\n    // ====================================================\n\n    /**\n     * @notice Generates a config ID from a verification config\n     * @param config The verification configuration\n     * @return The generated config ID (sha256 hash of encoded config)\n     */\n    function generateConfigId(SelfStructs.VerificationConfigV2 memory config) external pure returns (bytes32);\n}\n"
      },
      "npm/@selfxyz/contracts@1.2.3/contracts/interfaces/IPoseidonT3.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.28;\n\n/**\n * @title IPoseidonT3\n * @notice Interface for the PoseidonT3 library\n */\ninterface IPoseidonT3 {\n    function hash(uint256[2] memory inputs) external pure returns (uint256);\n}\n"
      },
      "npm/@selfxyz/contracts@1.2.3/contracts/interfaces/IRegisterCircuitVerifier.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.28;\n/**\n * @title IRegisterCircuitVerifier\n * @notice Interface for verifying register circuit proofs.\n * @dev This interface defines the structure of a register circuit proof and exposes a function to verify such proofs.\n */\n\nstruct GenericProofStruct {\n    uint256[2] a;\n    uint256[2][2] b;\n    uint256[2] c;\n    uint256[] pubSignals;\n}\n\ninterface IRegisterCircuitVerifier {\n    /**\n     * @notice Represents a register circuit proof.\n     * @dev This structure encapsulates the required proof elements.\n     * @param a An array of two unsigned integers representing the proof component 'a'.\n     * @param b A 2x2 array of unsigned integers representing the proof component 'b'.\n     * @param c An array of two unsigned integers representing the proof component 'c'.\n     * @param pubSignals An array of three unsigned integers representing the public signals associated with the proof.\n     */\n    struct RegisterCircuitProof {\n        uint256[2] a;\n        uint256[2][2] b;\n        uint256[2] c;\n        uint256[3] pubSignals;\n    }\n\n    /**\n     * @notice Verifies a given register circuit proof.\n     * @dev This function checks the validity of the provided proof parameters.\n     * @param a The 'a' component of the proof.\n     * @param b The 'b' component of the proof.\n     * @param c The 'c' component of the proof.\n     * @param pubSignals The public signals associated with the proof.\n     * @return isValid A boolean value indicating whether the provided proof is valid (true) or not (false).\n     */\n    function verifyProof(\n        uint256[2] calldata a,\n        uint256[2][2] calldata b,\n        uint256[2] calldata c,\n        uint256[3] calldata pubSignals\n    ) external view returns (bool isValid);\n}\n\ninterface IAadhaarRegisterCircuitVerifier {\n    /**\n     * @notice Verifies a given register circuit proof.\n     * @dev This function checks the validity of the provided proof parameters.\n     * @param a The 'a' component of the proof.\n     * @param b The 'b' component of the proof.\n     * @param c The 'c' component of the proof.\n     * @param pubSignals The public signals associated with the proof.\n     * @return isValid A boolean value indicating whether the provided proof is valid (true) or not (false).\n     */\n    function verifyProof(\n        uint256[2] calldata a,\n        uint256[2][2] calldata b,\n        uint256[2] calldata c,\n        uint256[4] calldata pubSignals\n    ) external view returns (bool isValid);\n}\n"
      },
      "npm/@selfxyz/contracts@1.2.3/contracts/interfaces/ISelfVerificationRoot.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.28;\n\n/**\n * @title ISelfVerificationRoot\n * @notice Interface for self-verification infrastructure integration\n * @dev Provides base functionality for verifying and disclosing identity credentials\n */\ninterface ISelfVerificationRoot {\n    /**\n     * @notice Structure containing proof data for disclose circuits\n     * @dev Contains the proof elements required for zero-knowledge verification\n     * @param a First proof element\n     * @param b Second proof element (2x2 matrix)\n     * @param c Third proof element\n     * @param pubSignals Array of 21 public signals for the circuit\n     */\n    struct DiscloseCircuitProof {\n        uint256[2] a;\n        uint256[2][2] b;\n        uint256[2] c;\n        uint256[21] pubSignals;\n    }\n\n    /**\n     * @notice Structure containing verified identity disclosure output data\n     * @dev Contains all disclosed identity information after successful verification\n     * @param attestationId Unique identifier for the identity documents\n     * @param userIdentifier Unique identifier for the user\n     * @param nullifier Unique nullifier to prevent double-spending\n     * @param forbiddenCountriesListPacked Packed representation of forbidden countries list\n     * @param issuingState The state/country that issued the identity document\n     * @param name Array of name components\n     * @param idNumber The identity document number\n     * @param nationality The nationality of the document holder\n     * @param dateOfBirth Date of birth in string format\n     * @param gender Gender of the document holder\n     * @param expiryDate Expiry date of the identity document\n     * @param olderThan Verified age threshold (e.g., 18 for adult verification)\n     * @param ofac Array of OFAC (Office of Foreign Assets Control) compliance flags\n     */\n    struct GenericDiscloseOutputV2 {\n        bytes32 attestationId;\n        uint256 userIdentifier;\n        uint256 nullifier;\n        uint256[4] forbiddenCountriesListPacked;\n        string issuingState;\n        string[] name;\n        string idNumber;\n        string nationality;\n        string dateOfBirth;\n        string gender;\n        string expiryDate;\n        uint256 olderThan;\n        bool[3] ofac;\n    }\n\n    /**\n     * @notice Verifies a self-proof using the bytes-based interface\n     * @dev Parses relayer data format and validates against contract settings before calling hub V2\n     * @param proofPayload Packed data from relayer in format: | 32 bytes attestationId | proof data |\n     * @param userContextData User-defined data in format: | 32 bytes configId | 32 bytes destChainId | 32 bytes userIdentifier | data |\n     */\n    function verifySelfProof(bytes calldata proofPayload, bytes calldata userContextData) external;\n\n    /**\n     * @notice Callback function called upon successful verification\n     * @dev Only the identity verification hub V2 contract should call this function\n     * @param output The verification output data containing disclosed identity information\n     * @param userData The user-defined data passed through the verification process\n     */\n    function onVerificationSuccess(bytes memory output, bytes memory userData) external;\n}\n"
      },
      "npm/@selfxyz/contracts@1.2.3/contracts/libraries/Formatter.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.28;\n\n/**\n * @title Formatter Library\n * @notice A library providing utility functions to format names, dates, and encode data.\n */\nlibrary Formatter {\n    error InvalidDateLength();\n    error InvalidYearRange();\n    error InvalidMonthRange();\n    error InvalidDayRange();\n    error InvalidFieldElement();\n    error InvalidDateDigit();\n\n    uint256 constant MAX_FORBIDDEN_COUNTRIES_LIST_LENGTH = 40;\n    uint256 constant SNARK_SCALAR_FIELD = 21888242871839275222246405745257275088548364400416034343698204186575808495617;\n\n    /**\n     * @notice Formats a full name string into first name(s) and last name.\n     * @dev The input is expected to contain a last name, followed by a \"<<\" separator and then first name(s).\n     *      The returned array contains the first names at index 0 and the last name at index 1.\n     * @param input The input string structured as \"lastName<<firstName(s)\".\n     * @return names An array of two strings: [firstName(s), lastName].\n     */\n    function formatName(string memory input) internal pure returns (string[] memory) {\n        bytes memory inputBytes = bytes(input);\n        bytes memory firstNameBytes;\n        bytes memory lastNameBytes;\n        string[] memory names = new string[](2);\n\n        uint256 i = 0;\n        // Extract last name\n        while (i < inputBytes.length && inputBytes[i] != \"<\") {\n            lastNameBytes = abi.encodePacked(lastNameBytes, inputBytes[i]);\n            i++;\n        }\n\n        // Skip the separator \"<<\".\n        i += 2;\n\n        // Extract first names.\n        while (i < inputBytes.length) {\n            if (inputBytes[i] == \"<\") {\n                if (i + 1 < inputBytes.length && inputBytes[i + 1] == \"<\") {\n                    break;\n                }\n                firstNameBytes = abi.encodePacked(firstNameBytes, \" \");\n            } else {\n                firstNameBytes = abi.encodePacked(firstNameBytes, inputBytes[i]);\n            }\n            i++;\n        }\n\n        names[0] = string(firstNameBytes);\n        names[1] = string(lastNameBytes);\n        return names;\n    }\n\n    /**\n     * @notice Formats a compact date string into a human-readable date.\n     * @dev Expects the input date string to have exactly 6 characters in YYMMDD format.\n     *      Returns the date in \"DD-MM-YY\" format.\n     * @param date A string representing the date in YYMMDD format.\n     * @return A formatted date string in the format \"DD-MM-YY\".\n     */\n    function formatDate(string memory date) internal pure returns (string memory) {\n        bytes memory dateBytes = bytes(date);\n        if (dateBytes.length != 6) {\n            revert InvalidDateLength();\n        }\n\n        if (dateBytes[2] > \"1\" || (dateBytes[2] == \"1\" && dateBytes[3] > \"2\")) {\n            revert InvalidMonthRange();\n        }\n\n        if (dateBytes[4] > \"3\" || (dateBytes[4] == \"3\" && dateBytes[5] > \"1\")) {\n            revert InvalidDayRange();\n        }\n\n        string memory year = substring(date, 0, 2);\n        string memory month = substring(date, 2, 4);\n        string memory day = substring(date, 4, 6);\n\n        return string(abi.encodePacked(day, \"-\", month, \"-\", year));\n    }\n\n    /**\n     * @notice Formats a full year date string into a human-readable date.\n     * @dev Expects the input date string to have exactly 8 characters in YYYYMMDD format.\n     *      Returns the date in \"YYYY-MM-DD\" format.\n     * @param date A string representing the date in YYYYMMDD format.\n     * @return A formatted date string in the format \"YYYY-MM-DD\".\n     */\n    function formatDateFullYear(string memory date) internal pure returns (string memory) {\n        bytes memory dateBytes = bytes(date);\n        if (dateBytes.length != 8) {\n            revert InvalidDateLength();\n        }\n\n        if (dateBytes[4] > \"1\" || (dateBytes[4] == \"1\" && dateBytes[5] > \"2\")) {\n            revert InvalidMonthRange();\n        }\n\n        if (dateBytes[6] > \"3\" || (dateBytes[6] == \"3\" && dateBytes[7] > \"1\")) {\n            revert InvalidDayRange();\n        }\n\n        string memory year = substring(date, 0, 4);\n        string memory month = substring(date, 4, 6);\n        string memory day = substring(date, 6, 8);\n\n        return string(abi.encodePacked(day, \"-\", month, \"-\", year));\n    }\n\n    /**\n     * @notice Converts an ASCII numeral code to its corresponding unsigned integer.\n     * @dev The input must represent an ASCII code for digits (0-9), i.e. between 48 and 57.\n     *      Reverts with InvalidAsciiCode if the input is out of range.\n     * @param numAscii The ASCII code of a digit character.\n     * @return The numeric value (0-9) corresponding to the ASCII code.\n     */\n    function numAsciiToUint(uint256 numAscii) internal pure returns (uint256) {\n        return (numAscii - 48);\n    }\n\n    /**\n     * @notice Converts an array of three field elements into a bytes representation.\n     * @dev Each element is converted into a specific number of bytes: 31, 31, and 31 respectively.\n     * @param publicSignals An array of three unsigned integers representing field elements.\n     * @return bytesArray A bytes array of total length 93 that encodes the three field elements.\n     */\n    function fieldElementsToBytes(uint256[3] memory publicSignals) internal pure returns (bytes memory) {\n        if (\n            publicSignals[0] >= SNARK_SCALAR_FIELD ||\n            publicSignals[1] >= SNARK_SCALAR_FIELD ||\n            publicSignals[2] >= SNARK_SCALAR_FIELD\n        ) {\n            revert InvalidFieldElement();\n        }\n        uint8[3] memory bytesCount = [31, 31, 31];\n        bytes memory bytesArray = new bytes(93);\n\n        uint256 index = 0;\n        for (uint256 i = 0; i < 3; i++) {\n            uint256 element = publicSignals[i];\n            for (uint8 j = 0; j < bytesCount[i]; j++) {\n                bytesArray[index++] = bytes1(uint8(element & 0xff));\n                element = element >> 8;\n            }\n        }\n        return bytesArray;\n    }\n\n    function fieldElementsToBytesIdCard(uint256[4] memory publicSignals) internal pure returns (bytes memory) {\n        if (\n            publicSignals[0] >= SNARK_SCALAR_FIELD ||\n            publicSignals[1] >= SNARK_SCALAR_FIELD ||\n            publicSignals[2] >= SNARK_SCALAR_FIELD ||\n            publicSignals[3] >= SNARK_SCALAR_FIELD\n        ) {\n            revert InvalidFieldElement();\n        }\n        uint8[4] memory bytesCount = [31, 31, 31, 1];\n        bytes memory bytesArray = new bytes(94);\n\n        uint256 index = 0;\n        for (uint256 i = 0; i < 4; i++) {\n            uint256 element = publicSignals[i];\n            for (uint8 j = 0; j < bytesCount[i]; j++) {\n                bytesArray[index++] = bytes1(uint8(element & 0xff));\n                element = element >> 8;\n            }\n        }\n        return bytesArray;\n    }\n\n    function fieldElementsToBytesAadhaar(uint256[4] memory publicSignals) internal pure returns (bytes memory) {\n        for (uint256 i = 0; i < 4; i++) {\n            if (publicSignals[i] >= SNARK_SCALAR_FIELD) {\n                revert InvalidFieldElement();\n            }\n        }\n\n        uint8[4] memory bytesCount = [31, 31, 31, 26];\n        bytes memory bytesArray = new bytes(119);\n\n        uint256 index = 0;\n        for (uint256 i = 0; i < 4; i++) {\n            uint256 element = publicSignals[i];\n            for (uint8 j = 0; j < bytesCount[i]; j++) {\n                bytesArray[index++] = bytes1(uint8(element & 0xff));\n                element = element >> 8;\n            }\n        }\n\n        return bytesArray;\n    }\n\n    /**\n     * @notice Extracts forbidden country codes from a packed uint256.\n     * @dev Each forbidden country is represented by 3 bytes in the packed data.\n     *      The function extracts up to MAX_FORBIDDEN_COUNTRIES_LIST_LENGTH forbidden countries.\n     * @param publicSignals A packed uint256 containing encoded forbidden country data.\n     * @return forbiddenCountries An array of strings representing the forbidden country codes.\n     */\n    function extractForbiddenCountriesFromPacked(\n        uint256[4] memory publicSignals\n    ) internal pure returns (string[MAX_FORBIDDEN_COUNTRIES_LIST_LENGTH] memory forbiddenCountries) {\n        for (uint256 i = 0; i < 4; i++) {\n            if (publicSignals[i] >= SNARK_SCALAR_FIELD) {\n                revert InvalidFieldElement();\n            }\n        }\n\n        for (uint256 j = 0; j < MAX_FORBIDDEN_COUNTRIES_LIST_LENGTH; j++) {\n            uint256 byteIndex = (j * 3) % 93;\n            uint256 index = j / 31;\n\n            if (byteIndex + 2 < 31) {\n                uint256 shift = byteIndex * 8;\n                uint256 mask = 0xFFFFFF;\n                uint256 packedData = (publicSignals[index * 3] >> shift) & mask;\n                uint256 reversedPackedData = ((packedData & 0xff) << 16) |\n                    ((packedData & 0xff00)) |\n                    ((packedData & 0xff0000) >> 16);\n                forbiddenCountries[j] = string(abi.encodePacked(uint24(reversedPackedData)));\n            } else if (byteIndex < 31) {\n                uint256 part0 = (publicSignals[0] >> (byteIndex * 8));\n                uint256 part1 = publicSignals[1] & 0x00ffff;\n                uint256 reversedPart1 = ((part1 & 0xff) << 8) | ((part1 & 0xff00) >> 8);\n                uint256 combined = reversedPart1 | (part0 << 16);\n                forbiddenCountries[j] = string(abi.encodePacked(uint24(combined)));\n            } else if (byteIndex + 2 < 62) {\n                uint256 byteIndexIn1 = byteIndex - 31;\n                uint256 shift = byteIndexIn1 * 8;\n                uint256 mask = 0xFFFFFF;\n                uint256 packedData = (publicSignals[1] >> shift) & mask;\n                uint256 reversedPackedData = ((packedData & 0xff) << 16) |\n                    ((packedData & 0xff00)) |\n                    ((packedData & 0xff0000) >> 16);\n                forbiddenCountries[j] = string(abi.encodePacked(uint24(reversedPackedData)));\n            } else if (byteIndex < 62) {\n                uint256 part0 = (publicSignals[1] >> ((byteIndex - 31) * 8)) & 0x00ffff;\n                uint256 reversedPart0 = ((part0 & 0xff) << 8) | ((part0 & 0xff00) >> 8);\n                uint256 part1 = publicSignals[2] & 0x0000ff;\n                uint256 combined = part1 | (reversedPart0 << 8);\n                forbiddenCountries[j] = string(abi.encodePacked(uint24(combined)));\n            } else if (byteIndex < 93) {\n                uint256 byteIndexIn1 = byteIndex - 62;\n                uint256 shift = byteIndexIn1 * 8;\n                uint256 mask = 0xFFFFFF;\n                uint256 packedData = (publicSignals[2] >> shift) & mask;\n                uint256 reversedPackedData = ((packedData & 0xff) << 16) |\n                    ((packedData & 0xff00)) |\n                    ((packedData & 0xff0000) >> 16);\n                forbiddenCountries[j] = string(abi.encodePacked(uint24(reversedPackedData)));\n            }\n        }\n\n        return forbiddenCountries;\n    }\n\n    /**\n     * @notice Converts an array of 6 numerical values representing a date into a Unix timestamp.\n     * @dev Each element in the dateNum array is taken modulo 10, converted to its ASCII digit,\n     *      and concatenated to form a date string in YYMMDD format. This string is then converted\n     *      into a Unix timestamp using dateToUnixTimestamp.\n     * @param dateNum An array of 6 unsigned integers representing a date in YYMMDD format.\n     * @return timestamp The Unix timestamp corresponding to the provided date.\n     */\n    function proofDateToUnixTimestamp(uint256[6] memory dateNum) internal pure returns (uint256) {\n        for (uint256 i = 0; i < 6; i++) {\n            if (dateNum[i] > 9) {\n                revert InvalidDateDigit();\n            }\n        }\n        string memory date = \"\";\n        for (uint256 i = 0; i < 6; i++) {\n            date = string(abi.encodePacked(date, bytes1(uint8(48 + (dateNum[i] % 10)))));\n        }\n        uint256 currentTimestamp = dateToUnixTimestamp(date);\n        return currentTimestamp;\n    }\n\n    /**\n     * @notice Converts an array of 3 numerical values representing a date into a Unix timestamp.\n     * @dev The input is expected to be in the format [year, month, day] and is not padded with 0s.\n     * @param dateNum An array of 3 unsigned integers representing a date in YYMMDD format.\n     * @return timestamp The Unix timestamp corresponding to the provided date.\n     */\n    function proofDateToUnixTimestampNumeric(uint256[3] memory dateNum) internal pure returns (uint256) {\n        if (dateNum[1] > 12 || dateNum[2] > 31) {\n            revert InvalidDateDigit();\n        }\n        return toTimestamp(dateNum[0], dateNum[1], dateNum[2]);\n    }\n\n    /**\n     * @notice Converts a date string in YYMMDD format into a Unix timestamp.\n     * @dev Parses the date string by extracting year, month, and day components using substring,\n     *      converts each component to an integer, and then computes the timestamp via toTimestamp.\n     *      Reverts if the input string is not exactly 6 characters long.\n     * @param date A 6-character string representing the date in YYMMDD format.\n     * @return timestamp The Unix timestamp corresponding to the input date.\n     */\n    function dateToUnixTimestamp(string memory date) internal pure returns (uint256) {\n        bytes memory dateBytes = bytes(date);\n        if (dateBytes.length != 6) {\n            revert InvalidDateLength();\n        }\n\n        if (dateBytes[2] > \"1\" || (dateBytes[2] == \"1\" && dateBytes[3] > \"2\")) {\n            revert InvalidMonthRange();\n        }\n\n        if (dateBytes[4] > \"3\" || (dateBytes[4] == \"3\" && dateBytes[5] > \"1\")) {\n            revert InvalidDayRange();\n        }\n\n        uint256 year = parseDatePart(substring(date, 0, 2)) + 2000;\n        uint256 month = parseDatePart(substring(date, 2, 4));\n        uint256 day = parseDatePart(substring(date, 4, 6));\n\n        return toTimestamp(year, month, day);\n    }\n\n    /**\n     * @notice Extracts a substring from a given string.\n     * @dev Returns the substring from startIndex (inclusive) to endIndex (exclusive).\n     * @param str The input string.\n     * @param startIndex The starting index of the substring (inclusive).\n     * @param endIndex The ending index of the substring (exclusive).\n     * @return The resulting substring.\n     */\n    function substring(string memory str, uint256 startIndex, uint256 endIndex) internal pure returns (string memory) {\n        bytes memory strBytes = bytes(str);\n        bytes memory result = new bytes(endIndex - startIndex);\n\n        for (uint256 i = startIndex; i < endIndex; i++) {\n            result[i - startIndex] = strBytes[i];\n        }\n\n        return string(result);\n    }\n\n    /**\n     * @notice Parses a numeric string and returns its unsigned integer representation.\n     * @dev Assumes the input string contains only numeric characters.\n     * @param value The string representing a number.\n     * @return result The parsed unsigned integer.\n     */\n    function parseDatePart(string memory value) internal pure returns (uint256) {\n        bytes memory tempEmptyStringTest = bytes(value);\n        if (tempEmptyStringTest.length == 0) {\n            return 0;\n        }\n\n        uint256 digit;\n        uint256 result;\n        for (uint256 i = 0; i < tempEmptyStringTest.length; i++) {\n            digit = uint8(tempEmptyStringTest[i]) - 48;\n            result = result * 10 + digit;\n        }\n        return result;\n    }\n\n    /**\n     * @notice Converts a specific date into a Unix timestamp.\n     * @dev Calculates the timestamp by summing the number of days for years, months, and days since January 1, 1970.\n     *      Takes leap years into account during the calculation.\n     * @param year The full year (e.g., 2023).\n     * @param month The month (1-12).\n     * @param day The day of the month.\n     * @return timestamp The Unix timestamp corresponding to the given date.\n     */\n    function toTimestamp(uint256 year, uint256 month, uint256 day) internal pure returns (uint256 timestamp) {\n        uint16 i;\n\n        if (year < 1970 || year > 2100) {\n            revert InvalidYearRange();\n        }\n\n        if (month < 1 || month > 12) {\n            revert InvalidMonthRange();\n        }\n\n        // Year.\n        for (i = 1970; i < year; i++) {\n            if (isLeapYear(i)) {\n                timestamp += 366 days;\n            } else {\n                timestamp += 365 days;\n            }\n        }\n\n        // Month.\n        uint8[12] memory monthDayCounts;\n        monthDayCounts[0] = 31;\n        if (isLeapYear(year)) {\n            monthDayCounts[1] = 29;\n        } else {\n            monthDayCounts[1] = 28;\n        }\n        monthDayCounts[2] = 31;\n        monthDayCounts[3] = 30;\n        monthDayCounts[4] = 31;\n        monthDayCounts[5] = 30;\n        monthDayCounts[6] = 31;\n        monthDayCounts[7] = 31;\n        monthDayCounts[8] = 30;\n        monthDayCounts[9] = 31;\n        monthDayCounts[10] = 30;\n        monthDayCounts[11] = 31;\n\n        if (day < 1 || day > monthDayCounts[month - 1]) {\n            revert InvalidDayRange();\n        }\n\n        for (i = 1; i < month; i++) {\n            timestamp += monthDayCounts[i - 1] * 1 days;\n        }\n\n        // Day.\n        timestamp += (day - 1) * 1 days;\n\n        return timestamp;\n    }\n\n    /**\n     * @notice Checks whether a given year is a leap year.\n     * @param year The year to check.\n     * @return True if the year is a leap year, otherwise false.\n     */\n    function isLeapYear(uint256 year) internal pure returns (bool) {\n        if (year < 1970 || year > 2100) {\n            revert InvalidYearRange();\n        }\n\n        if (year % 4 != 0) {\n            return false;\n        } else if (year % 100 != 0) {\n            return true;\n        } else if (year % 400 != 0) {\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n"
      },
      "npm/@selfxyz/contracts@1.2.3/contracts/libraries/SelfStructs.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.28;\n\n/**\n * @title SelfStructs\n * @dev Library containing data structures for Self protocol identity verification\n * @notice Defines structs for passport verification, EU ID verification, and generic disclosure outputs\n */\nlibrary SelfStructs {\n    /**\n     * @dev Header structure for Hub input containing contract version and scope information\n     * @param contractVersion Version of the contract being used\n     * @param scope Scope identifier for the verification request\n     * @param attestationId Unique identifier for the attestation\n     */\n    struct HubInputHeader {\n        uint8 contractVersion;\n        uint256 scope;\n        bytes32 attestationId;\n    }\n\n    /**\n     * @dev Output structure for passport verification results\n     * @param attestationId Unique identifier for the attestation\n     * @param revealedDataPacked Packed binary data of revealed information\n     * @param userIdentifier Unique identifier for the user\n     * @param nullifier Cryptographic nullifier to prevent double-spending\n     * @param forbiddenCountriesListPacked Packed list of forbidden countries (4 uint256 array)\n     */\n    struct PassportOutput {\n        uint256 attestationId;\n        bytes revealedDataPacked;\n        uint256 userIdentifier;\n        uint256 nullifier;\n        uint256[4] forbiddenCountriesListPacked;\n    }\n\n    /**\n     * @dev Output structure for EU ID verification results\n     * @param attestationId Unique identifier for the attestation\n     * @param revealedDataPacked Packed binary data of revealed information\n     * @param userIdentifier Unique identifier for the user\n     * @param nullifier Cryptographic nullifier to prevent double-spending\n     * @param forbiddenCountriesListPacked Packed list of forbidden countries (4 uint256 array)\n     */\n    struct EuIdOutput {\n        uint256 attestationId;\n        bytes revealedDataPacked;\n        uint256 userIdentifier;\n        uint256 nullifier;\n        uint256[4] forbiddenCountriesListPacked;\n    }\n\n    /**\n     * @dev Output structure for Aadhaar verification results\n     * @param attestationId Unique identifier for the attestation\n     * @param revealedDataPacked Packed binary data of revealed information\n     * @param userIdentifier Unique identifier for the user\n     * @param nullifier Cryptographic nullifier to prevent double-spending\n     */\n    struct AadhaarOutput {\n        uint256 attestationId;\n        bytes revealedDataPacked;\n        uint256 userIdentifier;\n        uint256 nullifier;\n        uint256[4] forbiddenCountriesListPacked;\n    }\n\n    /// @dev OFAC verification mode: Passport number only\n    uint256 constant passportNoOfac = 0;\n    /// @dev OFAC verification mode: Name and date of birth\n    uint256 constant nameAndDobOfac = 1;\n    /// @dev OFAC verification mode: Name and year of birth\n    uint256 constant nameAndYobOfac = 2;\n\n    /**\n     * @dev Generic disclosure output structure (Version 2) with detailed personal information\n     * @param attestationId Unique identifier for the attestation\n     * @param userIdentifier Unique identifier for the user\n     * @param nullifier Cryptographic nullifier to prevent double-spending\n     * @param forbiddenCountriesListPacked Packed list of forbidden countries (4 uint256 array)\n     * @param issuingState Country or state that issued the document\n     * @param name Array of name components (first, middle, last names)\n     * @param idNumber Government-issued identification number\n     * @param nationality Nationality of the document holder\n     * @param dateOfBirth Date of birth in string format\n     * @param gender Gender of the document holder\n     * @param expiryDate Document expiration date in string format\n     * @param olderThan Minimum age verification result\n     * @param ofac Array of OFAC (Office of Foreign Assets Control) verification results for different modes\n     */\n    struct GenericDiscloseOutputV2 {\n        bytes32 attestationId;\n        uint256 userIdentifier;\n        uint256 nullifier;\n        uint256[4] forbiddenCountriesListPacked;\n        string issuingState;\n        string[] name;\n        string idNumber;\n        string nationality;\n        string dateOfBirth;\n        string gender;\n        string expiryDate;\n        uint256 olderThan;\n        bool[3] ofac;\n    }\n\n    /**\n     * @dev Verification configuration structure (Version 1)\n     * @param olderThanEnabled Whether minimum age verification is enabled\n     * @param olderThan Minimum age requirement\n     * @param forbiddenCountriesEnabled Whether forbidden countries check is enabled\n     * @param forbiddenCountriesListPacked Packed list of forbidden countries (4 uint256 array)\n     * @param ofacEnabled Array of boolean flags for different OFAC verification modes\n     */\n    struct VerificationConfigV1 {\n        bool olderThanEnabled;\n        uint256 olderThan;\n        bool forbiddenCountriesEnabled;\n        uint256[4] forbiddenCountriesListPacked;\n        bool[3] ofacEnabled;\n    }\n\n    /**\n     * @dev Verification configuration structure (Version 2)\n     * @param olderThanEnabled Whether minimum age verification is enabled\n     * @param olderThan Minimum age requirement\n     * @param forbiddenCountriesEnabled Whether forbidden countries check is enabled\n     * @param forbiddenCountriesListPacked Packed list of forbidden countries (4 uint256 array)\n     * @param ofacEnabled Array of boolean flags for different OFAC verification modes\n     */\n    struct VerificationConfigV2 {\n        bool olderThanEnabled;\n        uint256 olderThan;\n        bool forbiddenCountriesEnabled;\n        uint256[4] forbiddenCountriesListPacked;\n        bool[3] ofacEnabled;\n    }\n}\n"
      },
      "npm/@selfxyz/contracts@1.2.3/contracts/libraries/SelfUtils.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.28;\nimport {SelfStructs} from \"./SelfStructs.sol\";\n\nlibrary SelfUtils {\n    struct UnformattedVerificationConfigV2 {\n        uint256 olderThan;\n        string[] forbiddenCountries;\n        bool ofacEnabled;\n    }\n\n    /**\n     * @dev Packs an array of forbidden countries into chunks suitable for circuit inputs\n     * @param forbiddenCountries Array of 3-character country codes\n     * @return output Array of 4 uint256 values containing packed country data\n     */\n    function packForbiddenCountriesList(\n        string[] memory forbiddenCountries\n    ) internal pure returns (uint256[4] memory output) {\n        uint256 MAX_BYTES_IN_FIELD = 31;\n        uint256 REQUIRED_CHUNKS = 4;\n\n        // Convert country codes to bytes array\n        bytes memory packedBytes;\n\n        // Validate and pack country codes\n        for (uint256 i = 0; i < forbiddenCountries.length; i++) {\n            bytes memory countryBytes = bytes(forbiddenCountries[i]);\n\n            // Validate country code length\n            require(countryBytes.length == 3, \"Invalid country code: must be exactly 3 characters long\");\n\n            // Append country code bytes\n            packedBytes = abi.encodePacked(packedBytes, countryBytes);\n        }\n\n        uint256 maxBytes = packedBytes.length;\n        uint256 packSize = MAX_BYTES_IN_FIELD;\n        uint256 numChunks = (maxBytes + packSize - 1) / packSize; // Ceiling division\n\n        // Pack bytes into chunks\n        for (uint256 i = 0; i < numChunks && i < REQUIRED_CHUNKS; i++) {\n            uint256 sum = 0;\n\n            for (uint256 j = 0; j < packSize; j++) {\n                uint256 idx = packSize * i + j;\n                if (idx < maxBytes) {\n                    uint256 value = uint256(uint8(packedBytes[idx]));\n                    uint256 shift = 8 * j;\n                    sum += value << shift;\n                }\n            }\n\n            output[i] = sum;\n        }\n\n        // Remaining elements are already initialized to 0\n        return output;\n    }\n\n    /**\n     * @dev Formats an unstructured verification configuration into the standardized circuit-compatible format\n     *\n     * This function transforms a simplified input structure into the complete verification configuration\n     * required by the verification config required by the hub.\n     *\n     * @notice Enabled Status Logic:\n     * - `olderThanEnabled`: Automatically set to `true` when `olderThan > 0`\n     * - `forbiddenCountriesEnabled`: Automatically set to `true` when `forbiddenCountries.length > 0`\n     * - `ofacEnabled`: Uses the provided boolean value, replicated across all 3 OFAC check levels\n     *\n     *\n     * @param unformattedVerificationConfigV2 The simplified input configuration containing:\n     *        - `olderThan`: Minimum age threshold (0 = disabled, >0 = enabled)\n     *        - `forbiddenCountries`: Array of 3-letter country codes (empty = disabled, non-empty = enabled)\n     *        - `ofacEnabled`: Boolean flag for all OFAC verification levels\n     *\n     * @return verificationConfigV2 The formatted configuration ready for circuit consumption with:\n     *         - Auto-computed enabled flags based on input values\n     *         - Packed forbidden countries list for efficient circuit processing\n     *         - Replicated OFAC settings across all verification levels\n     */\n    function formatVerificationConfigV2(\n        UnformattedVerificationConfigV2 memory unformattedVerificationConfigV2\n    ) internal pure returns (SelfStructs.VerificationConfigV2 memory verificationConfigV2) {\n        bool[3] memory ofacArray;\n        ofacArray[0] = unformattedVerificationConfigV2.ofacEnabled;\n        ofacArray[1] = unformattedVerificationConfigV2.ofacEnabled;\n        ofacArray[2] = unformattedVerificationConfigV2.ofacEnabled;\n\n        verificationConfigV2 = SelfStructs.VerificationConfigV2({\n            olderThanEnabled: unformattedVerificationConfigV2.olderThan > 0,\n            olderThan: unformattedVerificationConfigV2.olderThan,\n            forbiddenCountriesEnabled: unformattedVerificationConfigV2.forbiddenCountries.length > 0,\n            forbiddenCountriesListPacked: packForbiddenCountriesList(\n                unformattedVerificationConfigV2.forbiddenCountries\n            ),\n            ofacEnabled: ofacArray\n        });\n    }\n\n    /**\n     * @notice Convert string to BigInt using ASCII encoding\n     * @dev Converts each character to its ASCII value and packs them into a uint256\n     * @param str The input string (must be ASCII only, max 31 bytes)\n     * @return The resulting BigInt value\n     */\n    function stringToBigInt(string memory str) internal pure returns (uint256) {\n        bytes memory strBytes = bytes(str);\n        require(strBytes.length <= 31, \"String too long for BigInt conversion\");\n\n        uint256 result = 0;\n        for (uint256 i = 0; i < strBytes.length; i++) {\n            // Ensure ASCII only (0-127)\n            require(uint8(strBytes[i]) <= 127, \"Non-ASCII character detected\");\n            result = (result << 8) | uint256(uint8(strBytes[i]));\n        }\n        return result;\n    }\n\n    /**\n     * @notice Converts an address to its lowercase hex string representation\n     * @dev Produces a string like \"0x1234567890abcdef...\" (42 characters total)\n     * @param addr The address to convert\n     * @return The hex string representation of the address\n     */\n    function addressToHexString(address addr) internal pure returns (string memory) {\n        bytes32 value = bytes32(uint256(uint160(addr)));\n        bytes memory alphabet = \"0123456789abcdef\";\n        bytes memory str = new bytes(42);\n\n        str[0] = \"0\";\n        str[1] = \"x\";\n        for (uint256 i = 0; i < 20; i++) {\n            str[2 + i * 2] = alphabet[uint8(value[i + 12] >> 4)];\n            str[3 + i * 2] = alphabet[uint8(value[i + 12] & 0x0f)];\n        }\n\n        return string(str);\n    }\n}\n"
      },
      "project/contracts/AttestifyVault.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.24;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/utils/Pausable.sol\";\nimport \"@selfxyz/contracts/contracts/abstract/SelfVerificationRoot.sol\";\nimport \"@selfxyz/contracts/contracts/interfaces/ISelfVerificationRoot.sol\";\nimport \"@selfxyz/contracts/contracts/libraries/SelfStructs.sol\";\nimport \"./IAave.sol\";\n\ncontract AttestifyVault is\n    SelfVerificationRoot,\n    Ownable,\n    ReentrancyGuard,\n    Pausable\n{\n    using SafeERC20 for IERC20;\n\n    /* ========== STATE VARIABLES ========== */\n\n    // Token contracts\n    IERC20 public immutable cUSD;\n    IAToken public immutable acUSD;\n\n    // Protocol integrations\n    IPool public immutable aavePool;\n\n    // Self Protocol configuration\n    bytes32 public configId;\n\n    // Vault accounting (share-based system)\n    uint256 public totalShares;\n    mapping(address => uint256) public shares;\n\n    // User data\n    mapping(address => UserProfile) public users;\n    mapping(address => StrategyType) public userStrategy;\n\n    // Strategy configurations\n    mapping(StrategyType => Strategy) public strategies;\n\n    // Limits and config\n    uint256 public constant MIN_DEPOSIT = 1e18; // 1 cUSD\n    uint256 public constant MAX_DEPOSIT = 10_000e18;\n    uint256 public constant MAX_TVL = 100_000e18;\n    uint256 public constant RESERVE_RATIO = 10;\n\n    // Admin addresses\n    address public aiAgent;\n    address public treasury;\n\n    // Statistics\n    uint256 public totalDeposited;\n    uint256 public totalWithdrawn;\n    uint256 public lastRebalance;\n\n    /* ========== STRUCTS & ENUMS ========== */\n\n    struct UserProfile {\n        bool isVerified;\n        uint256 verifiedAt;\n        uint256 totalDeposited;\n        uint256 totalWithdrawn;\n        uint256 lastActionTime;\n        uint256 userIdentifier; // From Self Protocol\n    }\n\n    enum StrategyType {\n        CONSERVATIVE,\n        BALANCED,\n        GROWTH\n    }\n\n    struct Strategy {\n        string name;\n        uint8 aaveAllocation;\n        uint8 reserveAllocation;\n        uint16 targetAPY;\n        uint8 riskLevel;\n        bool isActive;\n    }\n\n    /* ========== EVENTS ========== */\n\n    event UserVerified(\n        address indexed user,\n        uint256 userIdentifier,\n        uint256 timestamp\n    );\n    event Deposited(address indexed user, uint256 assets, uint256 shares);\n    event Withdrawn(address indexed user, uint256 assets, uint256 shares);\n    event StrategyChanged(\n        address indexed user,\n        StrategyType oldStrategy,\n        StrategyType newStrategy\n    );\n    event DeployedToAave(uint256 amount, uint256 timestamp);\n    event WithdrawnFromAave(uint256 amount, uint256 timestamp);\n    event Rebalanced(\n        uint256 aaveBalance,\n        uint256 reserveBalance,\n        uint256 timestamp\n    );\n    event ConfigIdUpdated(bytes32 newConfigId);\n\n    /* ========== ERRORS ========== */\n\n    error NotVerified();\n    error InvalidAmount();\n    error ExceedsMaxDeposit();\n    error ExceedsMaxTVL();\n    error InsufficientShares();\n    error InsufficientLiquidity();\n    error ZeroAddress();\n    error ConfigNotSet();\n\n    /* ========== CONSTRUCTOR ========== */\n\n    constructor(\n        address _cUSD,\n        address _acUSD,\n        address _selfProtocolHub,\n        address _aavePool,\n        string memory _scopeSeed\n    ) SelfVerificationRoot(_selfProtocolHub, _scopeSeed) Ownable(msg.sender) {\n        if (\n            _cUSD == address(0) ||\n            _acUSD == address(0) ||\n            _selfProtocolHub == address(0) ||\n            _aavePool == address(0)\n        ) {\n            revert ZeroAddress();\n        }\n\n        cUSD = IERC20(_cUSD);\n        acUSD = IAToken(_acUSD);\n        aavePool = IPool(_aavePool);\n        treasury = msg.sender;\n\n        _initializeStrategies();\n\n        // Note: cUSD approval will be done on first deposit to avoid constructor issues\n    }\n\n    function _initializeStrategies() internal {\n        strategies[StrategyType.CONSERVATIVE] = Strategy({\n            name: \"Conservative\",\n            aaveAllocation: 100,\n            reserveAllocation: 0,\n            targetAPY: 350,\n            riskLevel: 1,\n            isActive: true\n        });\n\n        strategies[StrategyType.BALANCED] = Strategy({\n            name: \"Balanced\",\n            aaveAllocation: 90,\n            reserveAllocation: 10,\n            targetAPY: 350,\n            riskLevel: 3,\n            isActive: true\n        });\n\n        strategies[StrategyType.GROWTH] = Strategy({\n            name: \"Growth\",\n            aaveAllocation: 80,\n            reserveAllocation: 20,\n            targetAPY: 350,\n            riskLevel: 5,\n            isActive: true\n        });\n    }\n\n    /* ========== SELF PROTOCOL INTEGRATION ========== */\n\n    /**\n     * @notice Required override: Return the configuration ID for verification\n     */\n    function getConfigId(\n        bytes32 destinationChainId,\n        bytes32 userIdentifier,\n        bytes memory userDefinedData\n    ) public view override returns (bytes32) {\n        if (configId == bytes32(0)) revert ConfigNotSet();\n        return configId;\n    }\n\n    /**\n     * @notice Set the Self Protocol configuration ID\n     * @dev Must be called after deployment with ID from tools.self.xyz\n     */\n    function setConfigId(bytes32 _configId) external onlyOwner {\n        require(_configId != bytes32(0), \"Invalid config ID\");\n        configId = _configId;\n        emit ConfigIdUpdated(_configId);\n    }\n\n    /**\n     * @notice Hook called after successful verification\n     * @dev Override from SelfVerificationRoot\n     */\n    function customVerificationHook(\n        ISelfVerificationRoot.GenericDiscloseOutputV2 memory output,\n        bytes memory userData\n    ) internal virtual override {\n        // Mark user as verified\n        users[msg.sender].isVerified = true;\n        users[msg.sender].verifiedAt = block.timestamp;\n        users[msg.sender].userIdentifier = output.userIdentifier;\n\n        // Set default strategy\n        userStrategy[msg.sender] = StrategyType.CONSERVATIVE;\n\n        emit UserVerified(msg.sender, output.userIdentifier, block.timestamp);\n    }\n\n    /* ========== MODIFIERS ========== */\n\n    modifier onlyVerified() {\n        if (!users[msg.sender].isVerified) revert NotVerified();\n        _;\n    }\n\n    /* ========== IDENTITY VERIFICATION ========== */\n\n    /**\n     * @notice Check if user is verified\n     */\n    function isVerified(address user) external view returns (bool) {\n        return users[user].isVerified;\n    }\n\n    /* ========== CORE FUNCTIONS: DEPOSIT ========== */\n\n    function deposit(\n        uint256 assets\n    )\n        external\n        nonReentrant\n        whenNotPaused\n        onlyVerified\n        returns (uint256 sharesIssued)\n    {\n        if (assets < MIN_DEPOSIT) revert InvalidAmount();\n        if (assets > MAX_DEPOSIT) revert ExceedsMaxDeposit();\n        if (totalAssets() + assets > MAX_TVL) revert ExceedsMaxTVL();\n\n        sharesIssued = _convertToShares(assets);\n\n        shares[msg.sender] += sharesIssued;\n        totalShares += sharesIssued;\n        users[msg.sender].totalDeposited += assets;\n        users[msg.sender].lastActionTime = block.timestamp;\n        totalDeposited += assets;\n\n        cUSD.safeTransferFrom(msg.sender, address(this), assets);\n        _deployToAave(assets);\n\n        emit Deposited(msg.sender, assets, sharesIssued);\n    }\n\n    function _deployToAave(uint256 amount) internal {\n        uint256 reserveAmount = (amount * RESERVE_RATIO) / 100;\n        uint256 deployAmount = amount - reserveAmount;\n\n        if (deployAmount > 0) {\n            // Ensure Aave has approval (safer incremental approval)\n            uint256 currentAllowance = cUSD.allowance(\n                address(this),\n                address(aavePool)\n            );\n            if (currentAllowance < deployAmount) {\n                // Use incremental approval instead of unlimited\n                uint256 neededAllowance = deployAmount - currentAllowance;\n                cUSD.approve(address(aavePool), currentAllowance + neededAllowance);\n            }\n\n            // Supply to Aave (receives acUSD in return)\n            aavePool.supply(\n                address(cUSD),\n                deployAmount,\n                address(this),\n                0 // No referral code\n            );\n\n            emit DeployedToAave(deployAmount, block.timestamp);\n        }\n    }\n\n    /* ========== CORE FUNCTIONS: WITHDRAW ========== */\n\n    function withdraw(\n        uint256 assets\n    ) external nonReentrant returns (uint256 sharesBurned) {\n        sharesBurned = _convertToShares(assets);\n\n        if (shares[msg.sender] < sharesBurned) revert InsufficientShares();\n\n        shares[msg.sender] -= sharesBurned;\n        totalShares -= sharesBurned;\n        users[msg.sender].totalWithdrawn += assets;\n        users[msg.sender].lastActionTime = block.timestamp;\n        totalWithdrawn += assets;\n\n        uint256 reserveBalance = cUSD.balanceOf(address(this));\n\n        if (reserveBalance < assets) {\n            uint256 shortfall = assets - reserveBalance;\n            _withdrawFromAave(shortfall);\n        }\n\n        cUSD.safeTransfer(msg.sender, assets);\n\n        emit Withdrawn(msg.sender, assets, sharesBurned);\n    }\n\n    function _withdrawFromAave(uint256 amount) internal {\n        // Withdraw from Aave (burns acUSD, returns cUSD)\n        uint256 withdrawn = aavePool.withdraw(\n            address(cUSD),\n            amount,\n            address(this)\n        );\n\n        emit WithdrawnFromAave(withdrawn, block.timestamp);\n    }\n\n    /* ========== VIEW FUNCTIONS ========== */\n\n    function totalAssets() public view returns (uint256) {\n        uint256 reserveBalance = cUSD.balanceOf(address(this));\n        uint256 aaveBalance = acUSD.balanceOf(address(this));\n        return reserveBalance + aaveBalance;\n    }\n\n    function balanceOf(address user) external view returns (uint256) {\n        return _convertToAssets(shares[user]);\n    }\n\n    function getEarnings(address user) external view returns (uint256) {\n        uint256 currentBalance = _convertToAssets(shares[user]);\n        uint256 deposited = users[user].totalDeposited;\n        uint256 withdrawn = users[user].totalWithdrawn;\n\n        if (currentBalance + withdrawn > deposited) {\n            return (currentBalance + withdrawn) - deposited;\n        }\n        return 0;\n    }\n\n    function getVaultStats()\n        external\n        view\n        returns (\n            uint256 _totalAssets,\n            uint256 _totalShares,\n            uint256 reserveBalance,\n            uint256 aaveBalance,\n            uint256 _totalDeposited,\n            uint256 _totalWithdrawn\n        )\n    {\n        return (\n            totalAssets(),\n            totalShares,\n            cUSD.balanceOf(address(this)),\n            acUSD.balanceOf(address(this)),\n            totalDeposited,\n            totalWithdrawn\n        );\n    }\n\n    function getCurrentAPY() external view returns (uint256) {\n        return 350;\n    }\n\n    /* ========== SHARE CONVERSION ========== */\n\n    function _convertToShares(uint256 assets) internal view returns (uint256) {\n        uint256 _totalAssets = totalAssets();\n        if (totalShares == 0 || _totalAssets == 0) return assets;\n        return (assets * totalShares) / _totalAssets;\n    }\n\n    function _convertToAssets(uint256 _shares) internal view returns (uint256) {\n        if (totalShares == 0) return 0;\n        return (_shares * totalAssets()) / totalShares;\n    }\n\n    /* ========== STRATEGY MANAGEMENT ========== */\n\n    function changeStrategy(StrategyType newStrategy) external onlyVerified {\n        require(strategies[newStrategy].isActive, \"Invalid strategy\");\n\n        StrategyType oldStrategy = userStrategy[msg.sender];\n        userStrategy[msg.sender] = newStrategy;\n\n        emit StrategyChanged(msg.sender, oldStrategy, newStrategy);\n    }\n\n    /* ========== ADMIN FUNCTIONS ========== */\n\n    function rebalance() external {\n        require(msg.sender == owner() || msg.sender == aiAgent, \"Unauthorized\");\n\n        uint256 _totalAssets = totalAssets();\n        uint256 targetReserve = (_totalAssets * RESERVE_RATIO) / 100;\n        uint256 currentReserve = cUSD.balanceOf(address(this));\n\n        if (currentReserve < targetReserve) {\n            uint256 needed = targetReserve - currentReserve;\n            _withdrawFromAave(needed);\n        } else if (currentReserve > targetReserve * 2) {\n            uint256 excess = currentReserve - targetReserve;\n            _deployToAave(excess);\n        }\n\n        lastRebalance = block.timestamp;\n        emit Rebalanced(\n            acUSD.balanceOf(address(this)),\n            cUSD.balanceOf(address(this)),\n            block.timestamp\n        );\n    }\n\n    function setAIAgent(address _aiAgent) external onlyOwner {\n        if (_aiAgent == address(0)) revert ZeroAddress();\n        aiAgent = _aiAgent;\n    }\n\n    function setTreasury(address _treasury) external onlyOwner {\n        if (_treasury == address(0)) revert ZeroAddress();\n        treasury = _treasury;\n    }\n\n    function pause() external onlyOwner {\n        _pause();\n    }\n\n    function unpause() external onlyOwner {\n        _unpause();\n    }\n\n    function emergencyWithdraw(\n        address token,\n        uint256 amount\n    ) external onlyOwner {\n        require(paused(), \"Not paused\");\n        IERC20(token).safeTransfer(owner(), amount);\n    }\n}\n"
      },
      "project/contracts/IAave.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.24;\n\n/**\n * @title IAave\n * @notice Interface for Aave V3 Protocol on Celo\n */\n\n/**\n * @notice Main Aave V3 Pool interface\n */\ninterface IPool {\n    /**\n     * @notice Supply assets to earn interest (replaces deposit in V2)\n     */\n    function supply(\n        address asset,\n        uint256 amount,\n        address onBehalfOf,\n        uint16 referralCode\n    ) external;\n    \n    /**\n     * @notice Withdraw assets (same as V2)\n     */\n    function withdraw(\n        address asset,\n        uint256 amount,\n        address to\n    ) external returns (uint256);\n    \n    /**\n     * @notice Get user account data\n     */\n    function getUserAccountData(address user)\n        external\n        view\n        returns (\n            uint256 totalCollateralBase,\n            uint256 totalDebtBase,\n            uint256 availableBorrowsBase,\n            uint256 currentLiquidationThreshold,\n            uint256 ltv,\n            uint256 healthFactor\n        );\n}\n\n/**\n * @notice Aave aToken interface (replaces mToken)\n */\ninterface IAToken {\n    function balanceOf(address account) external view returns (uint256);\n    function scaledBalanceOf(address user) external view returns (uint256);\n    function totalSupply() external view returns (uint256);\n    function approve(address spender, uint256 amount) external returns (bool);\n    function transfer(address to, uint256 amount) external returns (bool);\n    function UNDERLYING_ASSET_ADDRESS() external view returns (address);\n}"
      }
    }
  }
}